{"version":3,"file":"str.min.js","sources":["../src/methods/trim/index.js","../src/methods/index.js","../src/methods/count/index.js","../src/methods/slugify/index.js","../src/methods/lower/index.js","../src/methods/upper/index.js","../src/methods/startsWith/index.js","../src/methods/endsWith/index.js","../src/methods/capitalize/index.js","../src/index.js"],"sourcesContent":["/**\n * @function trim\n * @description Trims left and right a string\n * @param {String} str\n * @return {String} Trimmed string\n * @example\n * trim(' This is a tesT ')\n * // This is a tesT\n * @example\n * str(' This is a tesT ').trim().value\n * // This is a tesT\n */\nconst trim = str =>\n  str\n    .replace(/^\\s+/, '')\n    .replace(/\\s+$/, '')\n\nexport default trim\n","import slugify from './slugify'\nimport lower from './lower'\nimport trim from './trim'\nimport count from './count'\nimport upper from './upper'\nimport startsWith from './startsWith'\nimport endsWith from './endsWith'\nimport capitalize from './capitalize'\n\nexport default {\n  count,\n  slugify,\n  lower,\n  upper,\n  trim,\n  startsWith,\n  endsWith,\n  capitalize\n}\n","/**\n * @function count\n * @description Counts characters in string\n * @param {String} str\n * @return {Number} Number of characters\n * @example\n * count('test')\n * // 4\n * @example\n * str('test').length\n * // 4\n * @example\n * str('test').count()\n * // 4\n */\n\nexport default str => String(str).length\n","import trim from '../trim'\n\n/**\n * @function slugify\n * @description Slugifys a string\n * @param {String} str\n * @param {String} [del=-] Delimiter, defaults to '-'\n * @return {String} Slugified string\n * @example\n * slugify(' This is a tesT ')\n * // this-is-a-test\n * @example\n * slugify(' This is a tesT ', ':')\n * // this:is:a:test\n * @example\n * str(' This is a tesT ').slugify().value\n * // this-is-a-test\n */\nconst slugify = (str, sep = '-') =>\n  trim(str)\n    .toLowerCase()\n    .replace(/ /g, sep) // Cambio espacios por el separador\n    .normalize('NFD') // Quito todas las tildes\n    .replace(/[\\u0300-\\u036f]/g, '')\n\nexport default slugify\n","/**\n * @function lower\n * @description Transform str to lower case\n * @param {String} str\n * @return {String} Lower cased string\n * @example\n * lower('TEST')\n * // test\n * @example\n * str('TEST').lower().value\n * // test\n */\nexport default str => str.toLowerCase()\n","/**\n * @function upper\n * @description Transform a string to uppercase\n * @param {String} str\n * @return {String} Uppercased string\n * @example\n * upper('test')\n * // TEST\n * @example\n * str('test').upper().value\n * // TEST\n */\n\nexport default str => String(str).toUpperCase()\n","/**\n * @function startsWith\n * @description Checks if a string starts with the provided substring\n * @param {String} str\n * @param {String} substring\n * @param {Number} [pos=0] Position to start checking. Defaults to 0\n * @return {Boolean} True / False\n * @example\n * startsWith('test', 'te')\n * // true\n * @example\n * str('test').startsWith('te')\n * // true\n */\n\nexport default (str, sub, pos = 0) => String(str).indexOf(sub, pos) === pos\n","/**\n * @function endsWith\n * @description Checks if a string ends with the provided substring\n * @param {String} str\n * @param {String} substring\n * @param {Number} [pos=0] Position to start checking. Defaults to 0\n * @return {Boolean} True / False\n * @example\n * endsWith('test', 'st')\n * // true\n * @example\n * str('test').endsWith('st')\n * // true\n */\n\nconst endsWith = (str, sub, pos) => {\n  str = String(str)\n\n  if (!pos || typeof pos !== 'number' || !isFinite(pos) || Math.floor(pos) !== pos || pos > str.length) {\n    pos = str.length\n  }\n\n  pos -= sub.length\n\n  const index = str.indexOf(sub, (pos - 1))\n\n  return index !== -1 && index === pos\n}\n\nexport default endsWith\n","import trim from '../trim'\n\n/**\n * @function capitalize\n * @description Capitalizes a string\n * @param {String} str\n * @return {String}\n * @example\n * capitalize('test')\n * // Test\n * @example\n * str('TEST').capitalize()\n * // Tets\n */\n\nexport default str => {\n  str = trim(str)\n  return String(str.charAt(0).toUpperCase()) + String(str.slice(1).toLowerCase())\n}\n","import functions from './methods'\n\nconst NOT_CHAINABLE = ['count', 'startsWith', 'endsWith']\n\nclass Str {\n  constructor (value) {\n    this.value = value\n\n    Object.keys(functions).map(f => {\n      this[f] = function (...args) {\n        const r = functions[f].call(null, this.value, ...args)\n\n        if (NOT_CHAINABLE.includes(f)) {\n          return r\n        }\n\n        this.value = r\n        return this\n      }\n    })\n\n    this.length = this.count(this.value)\n  }\n}\n\nfunction str (value) {\n  return new Str(value)\n}\n\nexport default str\n"],"names":["trim","str","replace","count","String","length","slugify","sep","toLowerCase","normalize","lower","upper","toUpperCase","startsWith","sub","pos","indexOf","endsWith","isFinite","Math","floor","index","capitalize","charAt","slice","NOT_CHAINABLE","Str","constructor","value","Object","keys","functions","map","f","args","r","call","this","includes"],"mappings":"yLAYA,MAAMA,EAAOC,GACXA,EACGC,QAAQ,OAAQ,IAChBA,QAAQ,OAAQ,UCNN,CACbC,MCMaF,GAAOG,OAAOH,GAAKI,ODLhCC,QEOc,CAACL,EAAKM,EAAM,MAC1BP,EAAKC,GACFO,cACAN,QAAQ,KAAMK,GACdE,UAAU,OACVP,QAAQ,mBAAoB,IFX/BQ,MGAaT,GAAOA,EAAIO,cHCxBG,MIAaV,GAAOG,OAAOH,GAAKW,cJChCZ,KAAAA,EACAa,YKAcZ,EAAKa,EAAKC,EAAM,IAAMX,OAAOH,GAAKe,QAAQF,EAAKC,KAASA,ELCtEE,SMDe,CAAChB,EAAKa,EAAKC,KAC1Bd,EAAMG,OAAOH,KAERc,GAAsB,iBAARA,IAAqBG,SAASH,IAAQI,KAAKC,MAAML,KAASA,GAAOA,EAAMd,EAAII,UAC5FU,EAAMd,EAAII,QAGZU,GAAOD,EAAIT,aAELgB,EAAQpB,EAAIe,QAAQF,EAAMC,EAAM,UAEpB,IAAXM,GAAgBA,IAAUN,GNTjCO,WOFarB,IACbA,EAAMD,EAAKC,GACJG,OAAOH,EAAIsB,OAAO,GAAGX,eAAiBR,OAAOH,EAAIuB,MAAM,GAAGhB,uBCf7DiB,EAAgB,CAAC,QAAS,aAAc,YAE9C,MAAMC,EACJC,YAAaC,QACNA,MAAQA,EAEbC,OAAOC,KAAKC,GAAWC,IAAIC,SACpBA,GAAK,YAAaC,SACfC,EAAIJ,EAAUE,GAAGG,KAAK,KAAMC,KAAKT,SAAUM,UAE7CT,EAAca,SAASL,GAClBE,QAGJP,MAAQO,EACNE,cAINhC,OAASgC,KAAKlC,MAAMkC,KAAKT,eAIlC,SAAcA,UACL,IAAIF,EAAIE"}